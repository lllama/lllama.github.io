<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>sanic on Lllama's blog</title><link>https://lllama.github.io/categories/sanic/</link><description>Recent content in sanic on Lllama's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 17 Apr 2023 20:35:00 +0100</lastBuildDate><atom:link href="https://lllama.github.io/categories/sanic/index.xml" rel="self" type="application/rss+xml"/><item><title>sanic-kit</title><link>https://lllama.github.io/posts/sanic-kit/</link><pubDate>Mon, 17 Apr 2023 20:35:00 +0100</pubDate><guid>https://lllama.github.io/posts/sanic-kit/</guid><description>HTMx has been a revelation for writing web apps. I’d previously used my preferred DERP stack (Django, Ember, REST framework, postgresql) which produced nice enough apps but took a lot of effort and had lots of redundant code: Postgres tables needed to be Django models, which needed to be DRF serialisers, which needed Ember Data models, and then finally rendered to the DOM.
Writing with htmx meant I could have most of the shiny but I only need to produce the html on the server.</description></item><item><title>URLs are harder than they should be</title><link>https://lllama.github.io/posts/urls-suck/</link><pubDate>Tue, 24 Jan 2023 16:13:28 +0000</pubDate><guid>https://lllama.github.io/posts/urls-suck/</guid><description>My current toy web-app is a webmail client. It provides the standard inbox view and then let’s you drill down to view actual mails. I also then have actions you can perform on these.
The URLs for these are fairly basic:
/mailbox/&amp;lt;ID&amp;gt; /mailbox/&amp;lt;ID&amp;gt;/&amp;lt;mail ID&amp;gt; /mailbox/&amp;lt;ID&amp;gt;/&amp;lt;mail ID&amp;gt;/delete So far, so whatever. The pain comes with how to construct the drill down urls from the current page. I can get the current URL in my templates with request.</description></item></channel></rss>