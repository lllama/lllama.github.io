<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>textual-patterns on Lllama's blog</title><link>https://lllama.github.io/categories/textual-patterns/</link><description>Recent content in textual-patterns on Lllama's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 24 Jan 2023 15:05:09 +0000</lastBuildDate><atom:link href="https://lllama.github.io/categories/textual-patterns/index.xml" rel="self" type="application/rss+xml"/><item><title>Validating Input in Textual</title><link>https://lllama.github.io/posts/textual-input-validation/</link><pubDate>Tue, 24 Jan 2023 15:05:09 +0000</pubDate><guid>https://lllama.github.io/posts/textual-input-validation/</guid><description>Valdiating Inputs in Textual Textual has a number of built in widgets to help capture user input. For text input, there is the standard Input widget. By default, this will let the user enter any characters that they wish.
Whenever a new value is entered, textual will fire off an Input.Changed event, that you can handle with an on_input_changed method in your App (or wherever). You may then be tempted to use this handler to validate the user input - the Input has a reactive variable but there’s no easy way to wire something up to an instance’s methods.</description></item></channel></rss>