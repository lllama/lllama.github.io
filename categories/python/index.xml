<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on Lllama's blog</title><link>https://lllama.github.io/categories/python/</link><description>Recent content in python on Lllama's blog</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 17 Apr 2023 20:35:00 +0100</lastBuildDate><atom:link href="https://lllama.github.io/categories/python/index.xml" rel="self" type="application/rss+xml"/><item><title>sanic-kit</title><link>https://lllama.github.io/posts/sanic-kit/</link><pubDate>Mon, 17 Apr 2023 20:35:00 +0100</pubDate><guid>https://lllama.github.io/posts/sanic-kit/</guid><description>HTMx has been a revelation for writing web apps. I’d previously used my preferred DERP stack (Django, Ember, REST framework, postgresql) which produced nice enough apps but took a lot of effort and had lots of redundant code: Postgres tables needed to be Django models, which needed to be DRF serialisers, which needed Ember Data models, and then finally rendered to the DOM.
Writing with htmx meant I could have most of the shiny but I only need to produce the html on the server.</description></item><item><title>Textual in WSL</title><link>https://lllama.github.io/posts/textual-in-wsl/</link><pubDate>Fri, 27 Jan 2023 11:52:07 +0000</pubDate><guid>https://lllama.github.io/posts/textual-in-wsl/</guid><description>If you’re running textual apps under WSL there are two things needed to make sure they look pretty:
make sure you’re using a good coding font with all the various Unicode characters make sure COLORTERM is set to truecolor in your environment.</description></item><item><title>Textual Screen Transitions</title><link>https://lllama.github.io/posts/textual-screen-transitions/</link><pubDate>Thu, 26 Jan 2023 11:49:38 +0000</pubDate><guid>https://lllama.github.io/posts/textual-screen-transitions/</guid><description>Textual brings a little bit of the web to the terminal. Apps have a DOM that is composed of widgets, and layout and styling is all handled with CSS.
Apps can also be made up of multiple Screens, which could be thought of as separate URLs or pages within a web-app. With this in mind, I started wondering about whether it would be possible to animate a transition between two different screens.</description></item><item><title>Validating Input in Textual</title><link>https://lllama.github.io/posts/textual-input-validation/</link><pubDate>Tue, 24 Jan 2023 15:05:09 +0000</pubDate><guid>https://lllama.github.io/posts/textual-input-validation/</guid><description>Textual has a number of built in widgets to help capture user input. For text input, there is the standard Input widget. By default, this will let the user enter any characters that they wish.
Whenever a new value is entered, textual will fire off an Input.Changed event, that you can handle with an on_input_changed method in your App (or wherever). You may then be tempted to use this handler to validate the user input - the Input has a reactive variable but there’s no easy way to wire something up to an instance’s methods.</description></item></channel></rss>